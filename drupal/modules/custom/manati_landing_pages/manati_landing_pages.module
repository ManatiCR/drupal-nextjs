<?php

/**
 * @file
 * Primary module hooks for Manati Landing pages module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_form_alter().
 */
function manati_landing_pages_form_alter(&$form, &$form_state, $form_id) {
  $forms = ['node_landing_page_form', 'node_landing_page_edit_form'];
  if (in_array($form_id, $forms)) {
    // Hide field_blocks field.
    $form['field_blocks']['#access'] = FALSE;
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function manati_landing_pages_node_update(EntityInterface $node) {
  if ($node->bundle() === 'landing_page') {
    $block_ids = [];
    foreach ($node->layout_builder__layout->getSections() as $section) {
      foreach ($section->getComponents() as $component) {
        $block = \Drupal::entityTypeManager()->getStorage('block_content')->loadRevision($component->get('configuration')['block_revision_id']);
        $block_ids[] = [
          'target_id' => $block->id(),
        ];
      }
    }
    $node->field_blocks = $block_ids;
    drupal_register_shutdown_function('_manati_landing_pages_post_update', $node);
  }
}

/**
 * Helper function for save the node.
 */
function _manati_landing_pages_post_update($node) {
  if ($node) {
    $node->save();
  }
}

function manati_landing_pages_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($entity instanceof \Drupal\node\NodeInterface && $entity->hasField('layout_builder__layout')) {

    $layout = $entity->get('layout_builder__layout');
    $sections = $layout->getIterator();
    dpm($sections);

    foreach ($sections as $key => $item) {
      /** @var \Drupal\layout_builder\Section $section */
      $section = $item->section;
      // The section does not have a unique id in the database. So we have to generate one.
      // Format = NodeID + LayoutId + OrderID (weight) of section
      $section_id = implode(
        '-',
        [
          $entity->id(),
          $section->getLayoutId(),
          $key + 1,
        ]
      );
      $section->setThirdPartySetting('graphql', 'key', $section_id);
      return ($section);
    }
  }



//     // $result = [];
//     // $definition = $entity->getFieldDefinition('layout_builder__layout');
//     // dpm($definition);
//     foreach ($entity->layout_builder__layout as $layout) {
//       $section = $layout->section;
//       // $definition = $section->getPluginDefinition();
//       // dpm($layout);
//       // $section_components = [];
//       // foreach ($section->getComponents() as $component_data) {
//       //   $component = $component_data->toArray();
//       //   $fields[] = [
//       //     'name' => 'title',
//       //     'value' => 'text',
//       //   ];
//       //   $section_components[] = [
//       //     'id' => $component['configuration']['block_revision_id'],
//       //     'type' => $component['configuration']['type'],
//       //     'region' =>$component['region'],
//       //     'fields' => getBlockFields($component['configuration']['block_revision_id']),
//       //   ];
//       // }

//       // $result[] = [
//       //   'layoutId' => $section->getLayoutId(),
//       //   'layoutSettings' =>$section->getLayoutSettings(),
//       //   'components' => $section_components,
//       // ];
//     }
//     // dpm($result);

//   }

}

function getBlockFields($id) {
  $entity_fields = [];
  if ($entity = \Drupal::entityTypeManager()->getStorage('block_content')->loadRevision($id)) {
    $fields = [
      $entity->get('field_title')->getString(),
      $entity->get('body')->getString()
    ];

    foreach ($fields as $field) {
      $entity_fields[] = [
        'name' => 'holi',
        'value' => $field,
      ];

    }

    // dpm($entity_fields);
  }

  return $entity_fields;
}
